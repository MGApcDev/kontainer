<?php

/**
 * @file
 * Hook implementations for the Kontainer module.
 */

use Drupal\breakpoint\BreakpointInterface;
use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityMalformedException;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Logger\RfcLogLevel;
use Drupal\Core\Template\Attribute;
use Drupal\kontainer\Plugin\media\Source\KontainerMediaSourceInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme().
 */
function kontainer_theme() {
  return [
    'responsive_kontainer_cdn_image' => [
      'variables' => [
        'uri' => NULL,
        'items' => [],
        'responsive_image_style_id' => NULL,
        'alt' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function kontainer_form_field_ui_field_storage_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Drupal 10.2 logic for disabling the field.
  if (array_key_exists('kontainer_cdn', $form['add']['new_storage_type'])) {
    unset($form['add']['new_storage_type']['kontainer_cdn']);
  }
  // Drupal 9 and pre 10.2 logic for disabling the field.
  unset($form['add']['new_storage_type']['#options']['Reference']['kontainer_cdn']);
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function kontainer_field_formatter_info_alter(array &$info) {
  if (isset($info['entity_reference_entity_view'])) {
    // Allows the "Rendered entity" formatter to be used on the
    // "Kontainer Media Reference" field type.
    $info['entity_reference_entity_view']['field_types'][] = 'kontainer_media_reference';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function kontainer_form_media_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $asset = $form_state->getFormObject()->getEntity()->getSource();
  if (!$asset instanceof KontainerMediaSourceInterface) {
    return;
  }
  // Disable add form save button for DAM assets.
  if (str_ends_with($form_id, '_add_form')) {
    /** @var \Drupal\kontainer\Service\KontainerServiceInterface $kontainer_service */
    $kontainer_service = \Drupal::service('kontainer_service');
    if (!$kontainer_service->isRemoteMediaSource()) {
      \Drupal::messenger()->addWarning('Kontainer CDN type can be used when Kontainer media source is set to CDN.');
      $form['actions']['submit']['#disabled'] = TRUE;
    }
    if ($form_id !== 'media_kontainer_cdn_add_form') {
      \Drupal::messenger()->addWarning('Kontainer assets cannot be added from this form, only through the Kontainer media storage field when creating content.');
      $form['actions']['submit']['#disabled'] = TRUE;
    }
  }
  if (isset($form['field_kontainer_file_id'])) {
    $form['field_kontainer_file_id']['widget'][0]['value']['#attributes']['readonly'] = 'readonly';
    $form['#validate'][] = '_kontainer_media_file_id_validate';
  }
}

/**
 * Form validation callback.
 *
 * Prevents the change of the kontainer file id value on media forms.
 */
function _kontainer_media_file_id_validate(&$form, FormStateInterface $form_state) {
  $asset = $form_state->getFormObject()->getEntity();
  $form_state_value = $form_state->getValue('field_kontainer_file_id')[0]['value'];
  if ($asset && $form_state_value != $asset->get('field_kontainer_file_id')->getString()) {
    $form_state->setErrorByName('field_kontainer_file_id', t('The Kontainer file id cannot be changed.'));
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function kontainer_form_media_type_confirm_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_state->getFormObject()->getEntity()->getSource() instanceof KontainerMediaSourceInterface) {
    /* @see \Drupal\media\Form\MediaTypeDeleteConfirmForm */
    unset($form['actions']);
    unset($form['entity_updates']);
    unset($form['entity_deletes']);
    $form['description'] = [
      '#type' => 'inline_template',
      '#template' => '<p>{{ message }}</p>',
      '#context' => [
        'message' => t('Kontainer media types cannot be deleted.'),
      ],
    ];
  }
}

// @todo Move the code below to an event subscriber, as soon as events are
// @todo created instead of entity lifecycle hooks, see
// @todo https://www.drupal.org/project/drupal/issues/2551893.
// Currently this logic relies on hook_entity_insert() and hook_entity_update()
// being executed after the same hooks in the entity_usage module, so we get
// the correct entity_usage targets. Entity usage module does not have any
// module weight altering, so this module will always be after it in the module
// list (same module weight => ordered alphabetically). For media deletion
// hook_ENTITY_TYPE_predelete() is used, because the entity_usage module uses
// hook_entity_predelete(), which is executed after the hook in our module, this
// is granted by Drupal core.

/**
 * Implements hook_entity_insert().
 */
function kontainer_entity_insert(EntityInterface $entity) {
  if ($entity instanceof NodeInterface) {
    /** @var \Drupal\kontainer\Service\KontainerServiceInterface $kontainer_service */
    $kontainer_service = \Drupal::service('kontainer_service');
    try {
      $media_targets = $kontainer_service->getNestedTargets($entity);
      $kontainer_service->trackMediaUsage($media_targets, $entity);
    }
    catch (PluginNotFoundException | EntityMalformedException | InvalidPluginDefinitionException $e) {
      $kontainer_service->logException($e);
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function kontainer_entity_update(EntityInterface $entity) {
  if ($entity instanceof NodeInterface) {
    /** @var \Drupal\kontainer\Service\KontainerServiceInterface $kontainer_service */
    $kontainer_service = \Drupal::service('kontainer_service');
    try {
      $media_targets = $kontainer_service->getNestedTargets($entity);
      $kontainer_service->trackMediaUsage($media_targets, $entity);
    }
    catch (PluginNotFoundException | EntityMalformedException | InvalidPluginDefinitionException $e) {
      $kontainer_service->logException($e);
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function kontainer_entity_delete(EntityInterface $entity) {
  /** @var \Drupal\kontainer\Service\KontainerServiceInterface $kontainer_service */
  $kontainer_service = \Drupal::service('kontainer_service');
  if ($entity instanceof NodeInterface) {
    $kontainer_service->deleteSourceUsage($entity->id());
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete().
 */
function kontainer_media_predelete(EntityInterface $entity) {
  /** @var \Drupal\kontainer\Service\KontainerServiceInterface $kontainer_service */
  $kontainer_service = \Drupal::service('kontainer_service');
  try {
    /** @var \Drupal\entity_usage\EntityUsageInterface $entity_usage */
    $entity_usage = \Drupal::service('entity_usage.usage');
    $media_targets = $kontainer_service->getMasterSourceIds($entity_usage->listSources($entity));
    $kontainer_service->deleteTargetUsage($media_targets, $entity->id());
  }
  catch (PluginNotFoundException | InvalidPluginDefinitionException $e) {
    $kontainer_service->logException($e);
  }
}

/**
 * Prepares variables for a Kontainer CDN responsive image.
 *
 * Default template: responsive-kontainer-cdn-image.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - items: Formatted arrays with data for each image style.
 *   - alt: Alternative text from the original Kontainer template item.
 *   - responsive_image_style_id: The ID of the responsive image style.
 *
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 *   Thrown if the entity type doesn't exist.
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 *   Thrown if the storage handler couldn't be loaded.
 *
 * @see template_preprocess_responsive_image
 */
function template_preprocess_responsive_kontainer_cdn_image(&$variables) {
  /** @var \Drupal\responsive_image\ResponsiveImageStyleInterface $responsive_image_style */
  $responsive_image_style = \Drupal::entityTypeManager()
    ->getStorage('responsive_image_style')
    ->load($variables['responsive_image_style_id']);
  if (!$responsive_image_style) {
    $variables['img_element'] = [];
    \Drupal::logger('kontainer')->log(RfcLogLevel::ERROR,
      'Failed to load responsive image style: “@style“ while displaying responsive image.',
      ['@style' => $variables['responsive_image_style_id']]);
    return;
  }
  /** @var \Drupal\breakpoint\BreakpointManagerInterface $breakpoint_manager */
  $breakpoint_manager = \Drupal::service('breakpoint.manager');
  $breakpoints = array_reverse($breakpoint_manager->getBreakpointsByGroup($responsive_image_style->getBreakpointGroup()));
  foreach ($responsive_image_style->getKeyedImageStyleMappings() as $breakpoint_id => $multipliers) {
    if (isset($breakpoints[$breakpoint_id])) {
      $variables['sources'][] = _kontainer_cdn_image_build_source_attributes($variables, $breakpoints[$breakpoint_id], $multipliers);
    }
  }
  if (isset($variables['sources']) && count($variables['sources']) === 1 && !isset($variables['sources'][0]['media'])) {
    $variables['output_image_tag'] = TRUE;
    foreach ($variables['sources'][0] as $attribute => $value) {
      if ($attribute != 'type') {
        $variables['attributes'][$attribute] = $value;
      }
    }
  }
  else {
    $variables['output_image_tag'] = FALSE;
  }
  $variables['img_element'] = [
    '#theme' => 'image',
    '#uri' => $variables['items'][$responsive_image_style->getFallbackImageStyle()]['url'],
    '#attributes' => [],
  ];
  if (isset($variables['alt'])) {
    $variables['img_element']['#alt'] = $variables['alt'];
  }
  if (isset($variables['attributes'])) {
    $variables['img_element']['#attributes'] = $variables['attributes'];
  }
}

/**
 * Helper function for template_preprocess_responsive_kontainer_cdn_image().
 *
 * Builds an array of attributes for <source> tags to be used in a <picture>
 * tag. In other words, this function provides the attributes for each <source>
 * tag in a <picture> tag.
 *
 * @param array $variables
 *   An array with the following keys:
 *    - items: Formatted arrays with data for each image style.
 *    - alt: Alternative text from the original Kontainer template item.
 *    - responsive_image_style_id: The ID of the responsive image style.
 * @param \Drupal\breakpoint\BreakpointInterface $breakpoint
 *   The breakpoint for this source tag.
 * @param array $multipliers
 *   An array with multipliers as keys and image style mappings as values.
 *
 * @return \Drupal\Core\Template\Attribute
 *   An object of attributes for the source tag.
 *
 * @see _responsive_image_build_source_attributes
 */
function _kontainer_cdn_image_build_source_attributes(array $variables, BreakpointInterface $breakpoint, array $multipliers) {
  $sizes = [];
  $srcset = [];
  $derivative_mime_types = [];
  foreach (array_reverse($multipliers) as $multiplier => $image_style_mapping) {
    switch ($image_style_mapping['image_mapping_type']) {
      case 'sizes':
        foreach ($image_style_mapping['image_mapping']['sizes_image_styles'] as $image_style_name) {
          if (array_key_exists($image_style_name, $variables['items'])) {
            $dimensions = $variables['items'][$image_style_name]['width'];
            $derivative_mime_type = responsive_image_get_mime_type($image_style_name, $variables['items'][$image_style_name]['extension']);
            $derivative_mime_types[] = $derivative_mime_type;
            $srcset[intval($dimensions)] = $variables['items'][$image_style_name]['url'] . ' ' . $dimensions . 'w';
            $sizes = array_merge(explode(',', $image_style_mapping['image_mapping']['sizes']), $sizes);
          }
        }
        break;

      case 'image_style':
        $derivative_mime_type = responsive_image_get_mime_type($image_style_mapping['image_mapping'], $variables['items'][$image_style_mapping['image_mapping']]['extension']);
        $derivative_mime_types[] = $derivative_mime_type;
        $srcset[intval(mb_substr($multiplier, 0, -1) * 100)] = $variables['items'][$image_style_mapping['image_mapping']]['url'] . ' ' . $multiplier;
        break;
    }
  }
  ksort($srcset);
  $source_attributes = new Attribute([
    'srcset' => implode(', ', array_unique($srcset)),
  ]);
  $media_query = trim($breakpoint->getMediaQuery());
  if (!empty($media_query)) {
    $source_attributes->setAttribute('media', $media_query);
  }
  if (count(array_unique($derivative_mime_types)) == 1) {
    $source_attributes->setAttribute('type', $derivative_mime_types[0]);
  }
  if (!empty($sizes)) {
    $source_attributes->setAttribute('sizes', implode(',', array_unique($sizes)));
  }
  return $source_attributes;
}

/**
 * Implements hook_form_alter().
 */
function kontainer_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\kontainer\Service\KontainerServiceInterface $kontainer_service */
  $kontainer_service = \Drupal::service('kontainer_service');
  if ($form_id === 'views_exposed_form') {
    $form_state_storage = $form_state->getStorage();
    if (array_key_exists('view', $form_state_storage)) {
      /** @var \Drupal\views\ViewExecutable $view */
      $view = $form_state_storage['view'];
      $query_parameters = $view->getRequest()->query->all();
      if (array_key_exists('widget_id', $query_parameters) && $query_parameters['widget_id'] === 'kontainer_media_library_widget') {
        $form['actions']['kontainer'] = $kontainer_service->buildKontainerSelectButtonArray('html_tag', [
          'data-kontainer-selector' => 'open-kontainer',
          'data-kontainer-type' => 'media-library',
          'type' => 'button',
          'class' => 'button',
        ]);
      }
    }
  }
  elseif ($form_id === 'system_modules_uninstall') {
    if (array_key_exists('#validation_reasons', $form['modules']['kontainer'])) {
      unset($form['modules']['kontainer']['#validation_reasons']);
    }
    if ($kontainer_service->canModuleBeUninstalled()) {
      $form['uninstall']['kontainer']['#disabled'] = FALSE;
    }
    else {
      $form['modules']['kontainer']['#validation_reasons'][] = t('Module cannot be uninstalled until there are media entities of Kontainer types existing.');
    }
  }
}

/**
 * Implements hook_module_preuninstall().
 */
function kontainer_module_preuninstall($module) {
  if ($module === 'kontainer') {
    /** @var \Drupal\kontainer\Service\KontainerServiceInterface $kontainer_service */
    $kontainer_service = \Drupal::service('kontainer_service');
    if (!$kontainer_service->canModuleBeUninstalled()) {
      throw new \Exception('Module cannot be uninstalled until there are media entities of Kontainer types existing.');
    }
  }
}
